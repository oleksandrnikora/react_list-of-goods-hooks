{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setSortType","reorderedGoods","goods","visibleGoods","console","log","ALPHABET","sort","first","second","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqDE,IAAME,EAAgB,WAM3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAlDD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNO,EAAY,YAAOD,GAMzB,OAFAE,QAAQC,IAAIN,EAAUH,GAEdG,GACN,KAAKP,EAASc,SACZH,EAAaI,MAAK,SAACC,EAAOC,GAAR,OAChBD,EAAME,cAAcD,MAEtB,MAEF,KAAKjB,EAASmB,OACZR,EAAaI,MAAK,SAACC,EAAOC,GAAR,OAChBD,EAAMI,OAASH,EAAOG,UAQ5B,OAAIhB,EACKO,EAAaU,UAGfV,EAkBgBW,CACrBrB,EACA,CAAEM,WAAUH,eAoBd,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYlB,IAAaP,EAASc,WAEtCY,QAtBsB,WAC5BlB,EAAYR,EAASc,WAejB,iCAWA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAaP,EAASmB,SAEtCO,QA7BwB,WAC9BlB,EAAYR,EAASmB,SAsBjB,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAarB,IAEjBsB,QAhDmB,WACzBrB,GAAYD,IAyCR,sBAWGG,GAAYH,IAEL,wBACEoB,KAAK,SACLD,UAAU,4BACVG,QA9CO,WACvBlB,EAAYR,EAASM,MACrBD,GAAW,IAyCG,sBAWZ,6BACGI,EAAekB,KAAI,SAAAC,GAAI,OACtB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCtJlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.947f5c65.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((first, second) => (\n        first.localeCompare(second)\n      ));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((first, second) => (\n        first.length - second.length\n      ));\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//  sortType: SortType,\n// };\n\nexport const App: React.FC = () => {\n// state: State = {\n//  isReversed: false,\n//  sortType: SortType.NONE,\n// };\n\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  const handleClickReverse = () => {\n    setReverse(!isReversed);\n  };\n\n  const handleClickSortByName = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleClicksortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleClickReset = () => {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleClickSortByName}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleClicksortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n        {\n          (sortType || isReversed)\n                && (\n                  <button\n                    type=\"button\"\n                    className=\"button is-danger is-light\"\n                    onClick={handleClickReset}\n                  >\n                    Reset\n                  </button>\n                )\n        }\n      </div>\n\n      <ul>\n        {reorderedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}